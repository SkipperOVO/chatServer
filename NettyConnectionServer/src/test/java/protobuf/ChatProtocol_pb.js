// source: ChatProtocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.C2CPushResp', null, global);
goog.exportSymbol('proto.C2CSendReq', null, global);
goog.exportSymbol('proto.C2CSendReq.type', null, global);
goog.exportSymbol('proto.ChatProtoPack', null, global);
goog.exportSymbol('proto.ChatProtoPack.DatabodyCase', null, global);
goog.exportSymbol('proto.HeartBeatReq', null, global);
goog.exportSymbol('proto.HeartBeatResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatProtoPack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ChatProtoPack.oneofGroups_);
};
goog.inherits(proto.ChatProtoPack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatProtoPack.displayName = 'proto.ChatProtoPack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HeartBeatReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HeartBeatReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HeartBeatReq.displayName = 'proto.HeartBeatReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HeartBeatResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HeartBeatResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HeartBeatResp.displayName = 'proto.HeartBeatResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2CSendReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2CSendReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2CSendReq.displayName = 'proto.C2CSendReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2CPushResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2CPushResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.C2CPushResp.displayName = 'proto.C2CPushResp';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ChatProtoPack.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.ChatProtoPack.DatabodyCase = {
  DATABODY_NOT_SET: 0,
  HEARTBEATREQ: 2,
  HEARTBEATRESP: 3,
  C2CSENDREQ: 4,
  C2CPUSHRESP: 5
};

/**
 * @return {proto.ChatProtoPack.DatabodyCase}
 */
proto.ChatProtoPack.prototype.getDatabodyCase = function() {
  return /** @type {proto.ChatProtoPack.DatabodyCase} */(jspb.Message.computeOneofCase(this, proto.ChatProtoPack.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatProtoPack.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatProtoPack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatProtoPack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatProtoPack.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    heartbeatreq: (f = msg.getHeartbeatreq()) && proto.HeartBeatReq.toObject(includeInstance, f),
    heartbeatresp: (f = msg.getHeartbeatresp()) && proto.HeartBeatResp.toObject(includeInstance, f),
    c2csendreq: (f = msg.getC2csendreq()) && proto.C2CSendReq.toObject(includeInstance, f),
    c2cpushresp: (f = msg.getC2cpushresp()) && proto.C2CPushResp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatProtoPack}
 */
proto.ChatProtoPack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatProtoPack;
  return proto.ChatProtoPack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatProtoPack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatProtoPack}
 */
proto.ChatProtoPack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.HeartBeatReq;
      reader.readMessage(value,proto.HeartBeatReq.deserializeBinaryFromReader);
      msg.setHeartbeatreq(value);
      break;
    case 3:
      var value = new proto.HeartBeatResp;
      reader.readMessage(value,proto.HeartBeatResp.deserializeBinaryFromReader);
      msg.setHeartbeatresp(value);
      break;
    case 4:
      var value = new proto.C2CSendReq;
      reader.readMessage(value,proto.C2CSendReq.deserializeBinaryFromReader);
      msg.setC2csendreq(value);
      break;
    case 5:
      var value = new proto.C2CPushResp;
      reader.readMessage(value,proto.C2CPushResp.deserializeBinaryFromReader);
      msg.setC2cpushresp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatProtoPack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatProtoPack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatProtoPack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatProtoPack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeartbeatreq();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.HeartBeatReq.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeatresp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.HeartBeatResp.serializeBinaryToWriter
    );
  }
  f = message.getC2csendreq();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.C2CSendReq.serializeBinaryToWriter
    );
  }
  f = message.getC2cpushresp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.C2CPushResp.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 version = 1;
 * @return {number}
 */
proto.ChatProtoPack.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatProtoPack} returns this
 */
proto.ChatProtoPack.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ChatProtoPack} returns this
 */
proto.ChatProtoPack.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatProtoPack.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HeartBeatReq heartBeatReq = 2;
 * @return {?proto.HeartBeatReq}
 */
proto.ChatProtoPack.prototype.getHeartbeatreq = function() {
  return /** @type{?proto.HeartBeatReq} */ (
    jspb.Message.getWrapperField(this, proto.HeartBeatReq, 2));
};


/**
 * @param {?proto.HeartBeatReq|undefined} value
 * @return {!proto.ChatProtoPack} returns this
*/
proto.ChatProtoPack.prototype.setHeartbeatreq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ChatProtoPack.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatProtoPack} returns this
 */
proto.ChatProtoPack.prototype.clearHeartbeatreq = function() {
  return this.setHeartbeatreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatProtoPack.prototype.hasHeartbeatreq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HeartBeatResp heartBeatResp = 3;
 * @return {?proto.HeartBeatResp}
 */
proto.ChatProtoPack.prototype.getHeartbeatresp = function() {
  return /** @type{?proto.HeartBeatResp} */ (
    jspb.Message.getWrapperField(this, proto.HeartBeatResp, 3));
};


/**
 * @param {?proto.HeartBeatResp|undefined} value
 * @return {!proto.ChatProtoPack} returns this
*/
proto.ChatProtoPack.prototype.setHeartbeatresp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ChatProtoPack.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatProtoPack} returns this
 */
proto.ChatProtoPack.prototype.clearHeartbeatresp = function() {
  return this.setHeartbeatresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatProtoPack.prototype.hasHeartbeatresp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional C2CSendReq c2cSendReq = 4;
 * @return {?proto.C2CSendReq}
 */
proto.ChatProtoPack.prototype.getC2csendreq = function() {
  return /** @type{?proto.C2CSendReq} */ (
    jspb.Message.getWrapperField(this, proto.C2CSendReq, 4));
};


/**
 * @param {?proto.C2CSendReq|undefined} value
 * @return {!proto.ChatProtoPack} returns this
*/
proto.ChatProtoPack.prototype.setC2csendreq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ChatProtoPack.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatProtoPack} returns this
 */
proto.ChatProtoPack.prototype.clearC2csendreq = function() {
  return this.setC2csendreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatProtoPack.prototype.hasC2csendreq = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional C2CPushResp c2cPushResp = 5;
 * @return {?proto.C2CPushResp}
 */
proto.ChatProtoPack.prototype.getC2cpushresp = function() {
  return /** @type{?proto.C2CPushResp} */ (
    jspb.Message.getWrapperField(this, proto.C2CPushResp, 5));
};


/**
 * @param {?proto.C2CPushResp|undefined} value
 * @return {!proto.ChatProtoPack} returns this
*/
proto.ChatProtoPack.prototype.setC2cpushresp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ChatProtoPack.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatProtoPack} returns this
 */
proto.ChatProtoPack.prototype.clearC2cpushresp = function() {
  return this.setC2cpushresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatProtoPack.prototype.hasC2cpushresp = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HeartBeatReq.prototype.toObject = function(opt_includeInstance) {
  return proto.HeartBeatReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HeartBeatReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartBeatReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    msg: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HeartBeatReq}
 */
proto.HeartBeatReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HeartBeatReq;
  return proto.HeartBeatReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HeartBeatReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HeartBeatReq}
 */
proto.HeartBeatReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HeartBeatReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HeartBeatReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HeartBeatReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartBeatReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 version = 1;
 * @return {number}
 */
proto.HeartBeatReq.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartBeatReq} returns this
 */
proto.HeartBeatReq.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.HeartBeatReq} returns this
 */
proto.HeartBeatReq.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HeartBeatReq.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 userId = 2;
 * @return {number}
 */
proto.HeartBeatReq.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartBeatReq} returns this
 */
proto.HeartBeatReq.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.HeartBeatReq} returns this
 */
proto.HeartBeatReq.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HeartBeatReq.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string msg = 3;
 * @return {string}
 */
proto.HeartBeatReq.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.HeartBeatReq} returns this
 */
proto.HeartBeatReq.prototype.setMsg = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.HeartBeatReq} returns this
 */
proto.HeartBeatReq.prototype.clearMsg = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HeartBeatReq.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HeartBeatResp.prototype.toObject = function(opt_includeInstance) {
  return proto.HeartBeatResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HeartBeatResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartBeatResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    msg: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HeartBeatResp}
 */
proto.HeartBeatResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HeartBeatResp;
  return proto.HeartBeatResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HeartBeatResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HeartBeatResp}
 */
proto.HeartBeatResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HeartBeatResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HeartBeatResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HeartBeatResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartBeatResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 version = 1;
 * @return {number}
 */
proto.HeartBeatResp.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartBeatResp} returns this
 */
proto.HeartBeatResp.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.HeartBeatResp} returns this
 */
proto.HeartBeatResp.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HeartBeatResp.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string msg = 3;
 * @return {string}
 */
proto.HeartBeatResp.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.HeartBeatResp} returns this
 */
proto.HeartBeatResp.prototype.setMsg = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.HeartBeatResp} returns this
 */
proto.HeartBeatResp.prototype.clearMsg = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HeartBeatResp.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2CSendReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2CSendReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2CSendReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2CSendReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    fromid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    toid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    msg: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2CSendReq}
 */
proto.C2CSendReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2CSendReq;
  return proto.C2CSendReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2CSendReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2CSendReq}
 */
proto.C2CSendReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setToid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2CSendReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2CSendReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2CSendReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2CSendReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.C2CSendReq.type = {
  TEXT: 0,
  PIC: 1,
  AUDIO: 2,
  VIDEO: 3,
  FILE: 4
};

/**
 * required int32 version = 1;
 * @return {number}
 */
proto.C2CSendReq.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2CSendReq} returns this
 */
proto.C2CSendReq.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.C2CSendReq} returns this
 */
proto.C2CSendReq.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.C2CSendReq.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 fromId = 2;
 * @return {number}
 */
proto.C2CSendReq.prototype.getFromid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2CSendReq} returns this
 */
proto.C2CSendReq.prototype.setFromid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.C2CSendReq} returns this
 */
proto.C2CSendReq.prototype.clearFromid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.C2CSendReq.prototype.hasFromid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 toId = 3;
 * @return {number}
 */
proto.C2CSendReq.prototype.getToid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2CSendReq} returns this
 */
proto.C2CSendReq.prototype.setToid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.C2CSendReq} returns this
 */
proto.C2CSendReq.prototype.clearToid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.C2CSendReq.prototype.hasToid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string msg = 4;
 * @return {string}
 */
proto.C2CSendReq.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.C2CSendReq} returns this
 */
proto.C2CSendReq.prototype.setMsg = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.C2CSendReq} returns this
 */
proto.C2CSendReq.prototype.clearMsg = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.C2CSendReq.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2CPushResp.prototype.toObject = function(opt_includeInstance) {
  return proto.C2CPushResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2CPushResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2CPushResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    fromid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    msgid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    msg: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2CPushResp}
 */
proto.C2CPushResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2CPushResp;
  return proto.C2CPushResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2CPushResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2CPushResp}
 */
proto.C2CPushResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2CPushResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2CPushResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2CPushResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2CPushResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int32 version = 1;
 * @return {number}
 */
proto.C2CPushResp.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2CPushResp} returns this
 */
proto.C2CPushResp.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.C2CPushResp} returns this
 */
proto.C2CPushResp.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.C2CPushResp.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 fromId = 2;
 * @return {number}
 */
proto.C2CPushResp.prototype.getFromid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2CPushResp} returns this
 */
proto.C2CPushResp.prototype.setFromid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.C2CPushResp} returns this
 */
proto.C2CPushResp.prototype.clearFromid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.C2CPushResp.prototype.hasFromid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 msgId = 3;
 * @return {number}
 */
proto.C2CPushResp.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.C2CPushResp} returns this
 */
proto.C2CPushResp.prototype.setMsgid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.C2CPushResp} returns this
 */
proto.C2CPushResp.prototype.clearMsgid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.C2CPushResp.prototype.hasMsgid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string msg = 4;
 * @return {string}
 */
proto.C2CPushResp.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.C2CPushResp} returns this
 */
proto.C2CPushResp.prototype.setMsg = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.C2CPushResp} returns this
 */
proto.C2CPushResp.prototype.clearMsg = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.C2CPushResp.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto);
